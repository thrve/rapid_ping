#!/usr/bin/env python


import re
import subprocess as sp
import argparse
import signal
import statistics as std
import time

re_ip = r'(:?(2[0-4]\d|25[0-5]|[01]?\d\d?)\.){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)$'
re_hostname = r'(:?\d\d-[A-Z]+-[A-Z]+\d+-[A-Z]+-\d$)'
re_rtt = re.compile(r'\d+.\d+\/')


parser = argparse.ArgumentParser(description='rapid_ping')
parser.add_argument('ip',
                    type=str, 
                    help='IP address')
parser.add_argument('-c',
                    type=float,
                    dest='count',
                    default='inf',
                    help='Number of ping requests to send')
parser.add_argument('-s',
                    type=int,
                    dest='size',
                    default=56,
                    help='Size of request packets (bytes)')
parser.add_argument('-r',
                    dest='rapid',
                    help='',
                    action="store_true")

args = parser.parse_args()

def signal_handler(sig, frame):
    if args.rapid == True:
        print('\r')
        ping_result()
        exit(0)
    else:
        print('\r')
        exit(0)


        
signal.signal(signal.SIGINT, signal_handler)


if not re.match(re_ip, args.ip)and not re.match(re_hostname, args.ip):
    print(f'{args.ip} is invalid value for ip addres.')
    exit(1)


if not args.size is None and args.size > 65469:
    print('expected integer between 0 and 65468')
    exit(1)
else:
    size = args.size




if __name__ == '__main__':

    if args.rapid == True:  
        
        def ping_result():
            ms = int(time.time() - start) * 1000
            print(f'--- {args.ip} ping statistics ---')
            if len(rtt) == 0:
                print(f'{repeat} packets transmitted, 0 received, 100% packet loss, time {ms}') 
            else:
                percent = int(100 - (received / repeat * 100))
                print(f'{repeat} packets transmitted, {received} received, {percent}% packet loss, time {ms}ms')
                print(f'rtt min/avg/max/mdev = {min(rtt)}/{sum(rtt)/len(rtt):.3f}/{max(rtt)}/{std.stdev(rtt):.3f} ms')
            print('\r')

        print(f'PING {args.ip} ({args.ip}) {args.size}({args.size + 28}) bytes of data.')
        rtt = []
        repeat = 0 
        received = 0
        start = time.time()
        while repeat < args.count:
            status, result = sp.getstatusoutput(f'ping -n -c 1 -W 1 -q {args.ip}')
            repeat += 1
            if status != 0:
                print('.', end='', flush=True)

            else:
                print('!', end='', flush=True)
                received += 1
                match = [x for x in re.search(re_rtt, result).group().split('/')]
                rtt_list = float(match[0])
                rtt.append(rtt_list)
                
        print('\n')
        ping_result()
    else:
        proc = sp.Popen(['ping', args.ip])
        proc.communicate()
